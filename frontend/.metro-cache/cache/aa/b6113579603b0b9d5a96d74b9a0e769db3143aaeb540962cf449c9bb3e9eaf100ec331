{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.conditional = conditional;\n  var _Animated = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/Animated\"));\n  const {\n    add,\n    multiply\n  } = _Animated.default;\n\n  /**\n   * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n   *\n   * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n   * @param main Animated Node to use if the condition is `true`\n   * @param fallback Animated Node to use if the condition is `false`\n   */\n  function conditional(condition, main, fallback) {\n    // To implement this behavior, we multiply the main node with the condition.\n    // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n    // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n    // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n    // This way, one of them will always be 0, and other one will be the value we need.\n    // In the end we add them both together, 0 + value we need = value we need\n    return add(multiply(condition, main), multiply(condition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    }), fallback));\n  }\n});","lineCount":34,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"conditional"],[8,21,1,13],[8,24,1,13,"conditional"],[8,35,1,13],[9,2,1,13],[9,6,1,13,"_Animated"],[9,15,1,13],[9,18,1,13,"_interopRequireDefault"],[9,40,1,13],[9,41,1,13,"require"],[9,48,1,13],[9,49,1,13,"_dependencyMap"],[9,63,1,13],[10,2,4,0],[10,8,4,6],[11,4,5,2,"add"],[11,7,5,5],[12,4,6,2,"multiply"],[13,2,7,0],[13,3,7,1],[13,6,7,4,"Animated"],[13,23,7,12],[15,2,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,2,16,7],[22,11,16,16,"conditional"],[22,22,16,27,"conditional"],[22,23,16,28,"condition"],[22,32,16,37],[22,34,16,39,"main"],[22,38,16,43],[22,40,16,45,"fallback"],[22,48,16,53],[22,50,16,55],[23,4,17,2],[24,4,18,2],[25,4,19,2],[26,4,20,2],[27,4,21,2],[28,4,22,2],[29,4,23,2],[29,11,23,9,"add"],[29,14,23,12],[29,15,23,13,"multiply"],[29,23,23,21],[29,24,23,22,"condition"],[29,33,23,31],[29,35,23,33,"main"],[29,39,23,37],[29,40,23,38],[29,42,23,40,"multiply"],[29,50,23,48],[29,51,23,49,"condition"],[29,60,23,58],[29,61,23,59,"interpolate"],[29,72,23,70],[29,73,23,71],[30,6,24,4,"inputRange"],[30,16,24,14],[30,18,24,16],[30,19,24,17],[30,20,24,18],[30,22,24,20],[30,23,24,21],[30,24,24,22],[31,6,25,4,"outputRange"],[31,17,25,15],[31,19,25,17],[31,20,25,18],[31,21,25,19],[31,23,25,21],[31,24,25,22],[32,4,26,2],[32,5,26,3],[32,6,26,4],[32,8,26,6,"fallback"],[32,16,26,14],[32,17,26,15],[32,18,26,16],[33,2,27,0],[34,0,27,1],[34,3]],"functionMap":{"names":["<global>","conditional"],"mappings":"AAA;OCe;CDW"}},"type":"js/module"}]}